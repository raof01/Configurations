##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
#server {
#    listen 80 default_server;
#    server_name app.raof01.net;
#    return 301 https://$host$request_uri;
#}

server {
        listen       80;
        server_name  app.raof01.cc;
        rewrite ^ https://$http_host$request_uri? permanent;    # force redirect http to https
        server_tokens off;
    }
server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        server_name app.raof01.cc;

        ssl_certificate /etc/letsencrypt/live/app.raof01.net/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/app.raof01.net/privkey.pem;

        ssl_session_timeout 5m;
        ssl_protocols  TLSv1.2;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;


        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;


location / {
    proxy_pass http://localhost:8080;
proxy_http_version 1.1;
        proxy_cache_bypass      $http_upgrade;
        proxy_set_header Upgrade                $http_upgrade;
        proxy_set_header Connection             "upgrade";
        proxy_set_header Host                   $host;
        proxy_set_header X-Real-IP              $remote_addr;
        proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto      $scheme;
        proxy_set_header X-Forwarded-Host       $host;
        proxy_set_header X-Forwarded-Port       $server_port;
#proxy_set_header X-Forwarded-Proto $scheme;
#    proxy_set_header Accept-Encoding "";

            # Rewrite redirects, such as / to /login and /logout
            # No trailing slash - including it works for login, but (at least) not logout.
            # Also means we can't use `proxy_redirect default;`
#            proxy_redirect $scheme://$host /finance;

            # Setting proper X-Forwarded headers, in combination TRUSTED_PROXIES
            # env variable, lets Laraval create URLs based on proxied address rather
            # than server name.
#            proxy_set_header X-Forwarded-For $remote_addr;
#            proxy_set_header X-Forwarded-Host $host;
#            proxy_set_header X-Forwarded-Proto $scheme;
#            proxy_set_header X-Forwarded-Port $server_port;

            # Add the folder name to links/asset URLs in the response body
#            sub_filter $scheme://$host http://$host;
#            sub_filter_once off;
}

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}
